name: Automated Release and Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.analyze-commits.outputs.bump }}
      should_release: ${{ steps.analyze-commits.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze commits for version bump
        id: analyze-commits
        run: |
          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

          if [[ "$LATEST_TAG" == "none" ]]; then
            COMMITS=$(git log --format="%s" -n 50)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --format="%s")
          fi

          echo "Analyzing commits since $LATEST_TAG"

          # Initialize flags
          HAS_BREAKING_CHANGE=false
          HAS_FEAT=false
          HAS_FIX=false
          HAS_CHANGES=false

          # Check if we have any new commits to process
          if [[ -z "$COMMITS" ]]; then
            echo "No new commits since last tag"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

          # Analyze commit messages
          while IFS= read -r COMMIT; do
            echo "Analyzing: $COMMIT"

            # Check for BREAKING CHANGE
            if [[ "$COMMIT" == *"BREAKING CHANGE"* || "$COMMIT" == *"!:"* ]]; then
              echo "Found breaking change"
              HAS_BREAKING_CHANGE=true
            fi

            # Check for feat:
            if [[ "$COMMIT" == "feat"* || "$COMMIT" == "feat("* ]]; then
              echo "Found feature"
              HAS_FEAT=true
            fi

            # Check for fix:
            if [[ "$COMMIT" == "fix"* || "$COMMIT" == "fix("* ]]; then
              echo "Found fix"
              HAS_FIX=true
            fi

            HAS_CHANGES=true
          done <<< "$COMMITS"

          # Determine version bump
          if [ "$HAS_BREAKING_CHANGE" = true ]; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Will bump major version due to breaking changes"
          elif [ "$HAS_FEAT" = true ]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Will bump minor version due to new features"
          elif [ "$HAS_FIX" = true ] || [ "$HAS_CHANGES" = true ]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Will bump patch version due to fixes or other changes"
          else
            echo "bump=none" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          fi

  build-and-publish:
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm test

      - name: Set Git user
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        id: version
        run: |
          # Bypass husky hooks in CI environment
          export HUSKY=0

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if current version exists on npm
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://registry.npmjs.org/isbn-bisac-tools/${CURRENT_VERSION})

          if [ "$HTTP_STATUS" != "404" ]; then
            echo "Version $CURRENT_VERSION already exists on npm. Bumping to ${{ needs.determine-version.outputs.bump }} version."

            # Bump version without git tag (we'll create it later)
            npm --no-git-tag-version version ${{ needs.determine-version.outputs.bump }}
          else
            echo "Version $CURRENT_VERSION doesn't exist on npm yet. Using this version."
          fi

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: npm run changelog

      - name: Build
        run: npm run build

      - name: Commit changes
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"

      - name: Create git tag
        run: |
          # Check if tag exists
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version.outputs.version }} already exists, deleting it"
            git tag -d "v${{ steps.version.outputs.version }}"
            git push origin :"v${{ steps.version.outputs.version }}"
          fi
          # Create new tag
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"

      - name: Publish to npm
        run: |
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push changes
        run: |
          git push --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
